// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	tenants "Hannon-app/features/tenants"
)

// TenantData is an autogenerated mock type for the TenantDataInterface type
type TenantData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *TenantData) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: addressFilter
func (_m *TenantData) GetAll(addressFilter string) ([]tenants.TenantCore, error) {
	ret := _m.Called(addressFilter)

	var r0 []tenants.TenantCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]tenants.TenantCore, error)); ok {
		return rf(addressFilter)
	}
	if rf, ok := ret.Get(0).(func(string) []tenants.TenantCore); ok {
		r0 = rf(addressFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tenants.TenantCore)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(addressFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTenantItems provides a mock function with given fields: id
func (_m *TenantData) GetAllTenantItems(id uint) ([]tenants.TenantCore, error) {
	ret := _m.Called(id)

	var r0 []tenants.TenantCore
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]tenants.TenantCore, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) []tenants.TenantCore); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tenants.TenantCore)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantById provides a mock function with given fields: id
func (_m *TenantData) GetTenantById(id uint) (tenants.TenantCore, error) {
	ret := _m.Called(id)

	var r0 tenants.TenantCore
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (tenants.TenantCore, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) tenants.TenantCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(tenants.TenantCore)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *TenantData) Login(email string, password string) (tenants.TenantCore, error) {
	ret := _m.Called(email, password)

	var r0 tenants.TenantCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (tenants.TenantCore, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) tenants.TenantCore); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(tenants.TenantCore)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: input, fileImages, fileID, filenameImages, filenameID
func (_m *TenantData) Register(input tenants.TenantCore, fileImages multipart.File, fileID multipart.File, filenameImages string, filenameID string) error {
	ret := _m.Called(input, fileImages, fileID, filenameImages, filenameID)

	var r0 error
	if rf, ok := ret.Get(0).(func(tenants.TenantCore, multipart.File, multipart.File, string, string) error); ok {
		r0 = rf(input, fileImages, fileID, filenameImages, filenameID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: input
func (_m *TenantData) Update(input tenants.TenantCore) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(tenants.TenantCore) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTenantData creates a new instance of TenantData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTenantData(t interface {
	mock.TestingT
	Cleanup(func())
}) *TenantData {
	mock := &TenantData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
